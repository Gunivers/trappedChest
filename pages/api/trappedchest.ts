import { NextApiRequest, NextApiResponse } from 'next';
import { itemListURL } from '../../lib/constants';
import { TrappedDataType } from '../../lib/types';
let AdmZip = require("adm-zip");

const licence = ""

export default async function handler(req: NextApiRequest, res: NextApiResponse) {

    if (req.method !== "POST") return res.status(405).json({ error: 'please use POST with body' })

    const data = JSON.parse(req.body) as TrappedDataType;

    let zip = new AdmZip();

    zip.addFile('pack.mcmeta', JSON.stringify({ pack: { pack_format: 10, description: "Generated by Trapped Chest from Gunivers !" } }))

    zip.addFile('data/minecraft/tags/functions/load.json', JSON.stringify({ values: [`${data.namespace}:load`] }))
    zip.addFile('data/minecraft/tags/functions/tick.json', JSON.stringify({ values: [`${data.namespace}:index`] }))

    let itemList = (await (await fetch(itemListURL)).text()).split('\n');

    zip.addFile(`data/${data.namespace}/tags/items/all.json`, JSON.stringify({ values: itemList }))
    zip.addFile(`data/${data.namespace}/functions/load.mcfunction`, `${licence}scoreboard objectives add ${data.namespace}.page dummy\nscoreboard objectives add ${data.namespace}.change dummy\nscoreboard objectives add ${data.namespace}.item dummy\nscoreboard objectives add ${data.namespace}.item2 dummy`)
    zip.addFile(`data/${data.namespace}/functions/test.mcfunction`, `${licence}execute store result score @s ${data.namespace}.item if data entity @s EnderItems[{}]\nexecute store result score @s ${data.namespace}.item2 if data entity @s EnderItems[{tag:{${data.namespace}:1}}]\nexecute unless score @s ${data.namespace}.item = @s ${data.namespace}.item2 run function ${data.namespace}:pages/clear`)

    zip.addFile(`data/${data.namespace}/functions/index.mcfunction`, `${licence}execute as @a run function ${data.namespace}:test\n${data.data.map((k, v) => `execute as @a[scores={${data.namespace}.page=${v}}] run function ${data.namespace}:pages/${v}/index`).join('\n')}\nclear @a #${data.namespace}:all{${data.namespace}:1}\nkill @e[nbt={Item:{tag:{${data.namespace}:1}}}]`)

    zip.addFile(`data/${data.namespace}/functions/pages/blank.mcfunction`, new Array(27).fill('').map((k, v) => `item replace entity @s enderchest.${v} with air`).join('\n'))
    zip.addFile(`data/${data.namespace}/functions/pages/clear.mcfunction`, new Array(27).fill('').map((k, v) => `item replace entity @s[nbt=!{EnderItems:[{tag:{${data.namespace}:1}, Slot:${v}b}]}] enderchest.${v} with air`).join('\n'))

    for (let i = 0; i < data.data.length; i++) {
        const inventory = data.data[i];
        if (inventory) {
            

            let testDataText = '';

            for (let j = 0; j < inventory.data.length; j++) {
                const item = inventory.data[j];
                if(item){
                    if (item.action.type == 'page') {
                        zip.addFile(`data/${data.namespace}/functions/pages/${i}/actions/${j}.mcfunction`, `${licence}scoreboard players set @s ${data.namespace}.page ${item.action.page || 0}\nscoreboard players set @s ${data.namespace}.change 1\nfunction ${data.namespace}:pages/blank`)
                    }else if(item.action.type == 'function'){
                        zip.addFile(`data/${data.namespace}/functions/pages/${i}/actions/${j}.mcfunction`, `${licence}function ${item.action.function}`)
                    }

                    if(item.modifiers){
                        for (let k = 0; k < item.modifiers.length; k++) {
                            testDataText += `execute${item.modifiers[k].condition ? ` ${item.modifiers[k].condition}` : ''} run item modify entity @s enderchest.${j} ${item.modifiers[k].id}\n`;
                        }
                    }
                }
            }

            zip.addFile(`data/${data.namespace}/functions/pages/${i}/test.mcfunction`, `${licence}${testDataText}`)

            zip.addFile(`data/${data.namespace}/functions/pages/${i}/index.mcfunction`, inventory.data.map((k, v) => k ? `execute as @s[nbt=!{EnderItems:[{tag:{${data.namespace}.action:${v}}}]}, scores={${data.namespace}.change=0}] run function ${data.namespace}:pages/${i}/actions/${v}` : '').join('\n') + `\nexecute as @s[scores={${data.namespace}.page=${i}}] run function ${data.namespace}:pages/${i}/set` + `${testDataText == '' ? '' : `\nfunction ${data.namespace}:pages/${i}/test`}`);
            zip.addFile(`data/${data.namespace}/functions/pages/${i}/set.mcfunction`, inventory.data.map((k, v) => k ? `item replace entity @s enderchest.${v} with ${k.id}{${data.namespace}:1, ${data.namespace}.action:${v}} ${k.count}`  : '').join('\n') + `\nscoreboard players set @s ${data.namespace}.change 0`);

        }
    }

    const date = new Date();
    console.log(`[${date.getDate()}/${date.getMonth()+1}/${date.getFullYear()}] GUI successfully generated : ${data.namespace}`);

    res.setHeader('Content-Type', 'application/zip')
    res.setHeader("Content-Disposition", "attachment; filename=" + 'trappedchest.zip')
    res.send(zip.toBuffer())
};